/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 9840.0, "series": [{"data": [[0.0, 10.0], [0.1, 14.0], [0.2, 15.0], [0.3, 16.0], [0.4, 17.0], [0.5, 18.0], [0.6, 20.0], [0.7, 21.0], [0.8, 21.0], [0.9, 22.0], [1.0, 23.0], [1.1, 24.0], [1.2, 24.0], [1.3, 25.0], [1.4, 26.0], [1.5, 27.0], [1.6, 28.0], [1.7, 29.0], [1.8, 30.0], [1.9, 30.0], [2.0, 31.0], [2.1, 32.0], [2.2, 33.0], [2.3, 34.0], [2.4, 35.0], [2.5, 35.0], [2.6, 36.0], [2.7, 36.0], [2.8, 37.0], [2.9, 39.0], [3.0, 40.0], [3.1, 41.0], [3.2, 42.0], [3.3, 43.0], [3.4, 45.0], [3.5, 46.0], [3.6, 48.0], [3.7, 49.0], [3.8, 51.0], [3.9, 52.0], [4.0, 53.0], [4.1, 54.0], [4.2, 55.0], [4.3, 56.0], [4.4, 58.0], [4.5, 60.0], [4.6, 61.0], [4.7, 63.0], [4.8, 64.0], [4.9, 66.0], [5.0, 67.0], [5.1, 68.0], [5.2, 69.0], [5.3, 70.0], [5.4, 72.0], [5.5, 73.0], [5.6, 74.0], [5.7, 75.0], [5.8, 77.0], [5.9, 78.0], [6.0, 79.0], [6.1, 81.0], [6.2, 83.0], [6.3, 84.0], [6.4, 86.0], [6.5, 88.0], [6.6, 89.0], [6.7, 90.0], [6.8, 91.0], [6.9, 93.0], [7.0, 94.0], [7.1, 95.0], [7.2, 97.0], [7.3, 98.0], [7.4, 99.0], [7.5, 101.0], [7.6, 102.0], [7.7, 103.0], [7.8, 104.0], [7.9, 106.0], [8.0, 107.0], [8.1, 108.0], [8.2, 110.0], [8.3, 111.0], [8.4, 112.0], [8.5, 113.0], [8.6, 115.0], [8.7, 116.0], [8.8, 117.0], [8.9, 118.0], [9.0, 119.0], [9.1, 121.0], [9.2, 122.0], [9.3, 123.0], [9.4, 124.0], [9.5, 126.0], [9.6, 127.0], [9.7, 128.0], [9.8, 130.0], [9.9, 131.0], [10.0, 132.0], [10.1, 133.0], [10.2, 134.0], [10.3, 136.0], [10.4, 137.0], [10.5, 138.0], [10.6, 139.0], [10.7, 140.0], [10.8, 141.0], [10.9, 142.0], [11.0, 144.0], [11.1, 145.0], [11.2, 146.0], [11.3, 147.0], [11.4, 148.0], [11.5, 149.0], [11.6, 150.0], [11.7, 151.0], [11.8, 152.0], [11.9, 153.0], [12.0, 154.0], [12.1, 155.0], [12.2, 156.0], [12.3, 157.0], [12.4, 158.0], [12.5, 159.0], [12.6, 160.0], [12.7, 161.0], [12.8, 162.0], [12.9, 163.0], [13.0, 164.0], [13.1, 165.0], [13.2, 167.0], [13.3, 168.0], [13.4, 169.0], [13.5, 169.0], [13.6, 170.0], [13.7, 172.0], [13.8, 172.0], [13.9, 173.0], [14.0, 175.0], [14.1, 176.0], [14.2, 176.0], [14.3, 177.0], [14.4, 178.0], [14.5, 179.0], [14.6, 180.0], [14.7, 182.0], [14.8, 183.0], [14.9, 184.0], [15.0, 185.0], [15.1, 186.0], [15.2, 187.0], [15.3, 188.0], [15.4, 189.0], [15.5, 190.0], [15.6, 191.0], [15.7, 192.0], [15.8, 193.0], [15.9, 194.0], [16.0, 195.0], [16.1, 197.0], [16.2, 198.0], [16.3, 199.0], [16.4, 200.0], [16.5, 201.0], [16.6, 202.0], [16.7, 203.0], [16.8, 204.0], [16.9, 205.0], [17.0, 206.0], [17.1, 207.0], [17.2, 208.0], [17.3, 209.0], [17.4, 210.0], [17.5, 211.0], [17.6, 212.0], [17.7, 213.0], [17.8, 214.0], [17.9, 215.0], [18.0, 216.0], [18.1, 217.0], [18.2, 218.0], [18.3, 219.0], [18.4, 219.0], [18.5, 220.0], [18.6, 221.0], [18.7, 222.0], [18.8, 223.0], [18.9, 224.0], [19.0, 225.0], [19.1, 226.0], [19.2, 227.0], [19.3, 228.0], [19.4, 228.0], [19.5, 229.0], [19.6, 230.0], [19.7, 231.0], [19.8, 232.0], [19.9, 233.0], [20.0, 234.0], [20.1, 235.0], [20.2, 236.0], [20.3, 237.0], [20.4, 238.0], [20.5, 239.0], [20.6, 239.0], [20.7, 240.0], [20.8, 241.0], [20.9, 242.0], [21.0, 243.0], [21.1, 244.0], [21.2, 245.0], [21.3, 246.0], [21.4, 247.0], [21.5, 247.0], [21.6, 248.0], [21.7, 249.0], [21.8, 250.0], [21.9, 251.0], [22.0, 252.0], [22.1, 253.0], [22.2, 254.0], [22.3, 255.0], [22.4, 256.0], [22.5, 256.0], [22.6, 257.0], [22.7, 258.0], [22.8, 259.0], [22.9, 260.0], [23.0, 261.0], [23.1, 262.0], [23.2, 263.0], [23.3, 264.0], [23.4, 265.0], [23.5, 266.0], [23.6, 267.0], [23.7, 267.0], [23.8, 268.0], [23.9, 269.0], [24.0, 270.0], [24.1, 271.0], [24.2, 272.0], [24.3, 273.0], [24.4, 274.0], [24.5, 275.0], [24.6, 276.0], [24.7, 277.0], [24.8, 278.0], [24.9, 279.0], [25.0, 280.0], [25.1, 281.0], [25.2, 282.0], [25.3, 283.0], [25.4, 284.0], [25.5, 285.0], [25.6, 286.0], [25.7, 286.0], [25.8, 287.0], [25.9, 288.0], [26.0, 289.0], [26.1, 290.0], [26.2, 291.0], [26.3, 292.0], [26.4, 293.0], [26.5, 294.0], [26.6, 295.0], [26.7, 296.0], [26.8, 297.0], [26.9, 298.0], [27.0, 298.0], [27.1, 299.0], [27.2, 300.0], [27.3, 301.0], [27.4, 302.0], [27.5, 303.0], [27.6, 304.0], [27.7, 305.0], [27.8, 306.0], [27.9, 306.0], [28.0, 307.0], [28.1, 308.0], [28.2, 309.0], [28.3, 310.0], [28.4, 311.0], [28.5, 312.0], [28.6, 313.0], [28.7, 314.0], [28.8, 315.0], [28.9, 316.0], [29.0, 317.0], [29.1, 318.0], [29.2, 319.0], [29.3, 320.0], [29.4, 321.0], [29.5, 323.0], [29.6, 323.0], [29.7, 324.0], [29.8, 326.0], [29.9, 327.0], [30.0, 328.0], [30.1, 329.0], [30.2, 330.0], [30.3, 331.0], [30.4, 333.0], [30.5, 334.0], [30.6, 335.0], [30.7, 336.0], [30.8, 336.0], [30.9, 337.0], [31.0, 339.0], [31.1, 339.0], [31.2, 340.0], [31.3, 342.0], [31.4, 343.0], [31.5, 344.0], [31.6, 345.0], [31.7, 346.0], [31.8, 348.0], [31.9, 349.0], [32.0, 350.0], [32.1, 351.0], [32.2, 352.0], [32.3, 353.0], [32.4, 354.0], [32.5, 355.0], [32.6, 357.0], [32.7, 357.0], [32.8, 358.0], [32.9, 359.0], [33.0, 361.0], [33.1, 362.0], [33.2, 363.0], [33.3, 364.0], [33.4, 365.0], [33.5, 366.0], [33.6, 367.0], [33.7, 368.0], [33.8, 369.0], [33.9, 370.0], [34.0, 372.0], [34.1, 373.0], [34.2, 374.0], [34.3, 375.0], [34.4, 376.0], [34.5, 378.0], [34.6, 379.0], [34.7, 380.0], [34.8, 381.0], [34.9, 382.0], [35.0, 383.0], [35.1, 384.0], [35.2, 385.0], [35.3, 386.0], [35.4, 387.0], [35.5, 388.0], [35.6, 390.0], [35.7, 391.0], [35.8, 392.0], [35.9, 393.0], [36.0, 394.0], [36.1, 395.0], [36.2, 396.0], [36.3, 398.0], [36.4, 399.0], [36.5, 400.0], [36.6, 401.0], [36.7, 402.0], [36.8, 403.0], [36.9, 404.0], [37.0, 405.0], [37.1, 407.0], [37.2, 408.0], [37.3, 409.0], [37.4, 411.0], [37.5, 412.0], [37.6, 413.0], [37.7, 415.0], [37.8, 416.0], [37.9, 417.0], [38.0, 418.0], [38.1, 419.0], [38.2, 420.0], [38.3, 422.0], [38.4, 423.0], [38.5, 424.0], [38.6, 425.0], [38.7, 426.0], [38.8, 427.0], [38.9, 429.0], [39.0, 430.0], [39.1, 432.0], [39.2, 433.0], [39.3, 434.0], [39.4, 435.0], [39.5, 436.0], [39.6, 438.0], [39.7, 439.0], [39.8, 440.0], [39.9, 441.0], [40.0, 442.0], [40.1, 443.0], [40.2, 445.0], [40.3, 446.0], [40.4, 447.0], [40.5, 448.0], [40.6, 449.0], [40.7, 450.0], [40.8, 452.0], [40.9, 453.0], [41.0, 454.0], [41.1, 455.0], [41.2, 457.0], [41.3, 458.0], [41.4, 459.0], [41.5, 461.0], [41.6, 463.0], [41.7, 464.0], [41.8, 465.0], [41.9, 467.0], [42.0, 469.0], [42.1, 470.0], [42.2, 472.0], [42.3, 473.0], [42.4, 474.0], [42.5, 476.0], [42.6, 477.0], [42.7, 478.0], [42.8, 479.0], [42.9, 480.0], [43.0, 482.0], [43.1, 483.0], [43.2, 485.0], [43.3, 486.0], [43.4, 487.0], [43.5, 489.0], [43.6, 490.0], [43.7, 492.0], [43.8, 493.0], [43.9, 494.0], [44.0, 496.0], [44.1, 497.0], [44.2, 499.0], [44.3, 500.0], [44.4, 501.0], [44.5, 503.0], [44.6, 504.0], [44.7, 506.0], [44.8, 508.0], [44.9, 509.0], [45.0, 511.0], [45.1, 513.0], [45.2, 514.0], [45.3, 516.0], [45.4, 517.0], [45.5, 518.0], [45.6, 520.0], [45.7, 521.0], [45.8, 522.0], [45.9, 524.0], [46.0, 525.0], [46.1, 527.0], [46.2, 528.0], [46.3, 529.0], [46.4, 530.0], [46.5, 532.0], [46.6, 533.0], [46.7, 535.0], [46.8, 536.0], [46.9, 537.0], [47.0, 539.0], [47.1, 541.0], [47.2, 542.0], [47.3, 544.0], [47.4, 546.0], [47.5, 548.0], [47.6, 549.0], [47.7, 550.0], [47.8, 552.0], [47.9, 553.0], [48.0, 554.0], [48.1, 556.0], [48.2, 557.0], [48.3, 558.0], [48.4, 560.0], [48.5, 561.0], [48.6, 563.0], [48.7, 565.0], [48.8, 567.0], [48.9, 568.0], [49.0, 570.0], [49.1, 572.0], [49.2, 573.0], [49.3, 575.0], [49.4, 576.0], [49.5, 578.0], [49.6, 579.0], [49.7, 581.0], [49.8, 583.0], [49.9, 584.0], [50.0, 586.0], [50.1, 588.0], [50.2, 589.0], [50.3, 591.0], [50.4, 593.0], [50.5, 594.0], [50.6, 596.0], [50.7, 597.0], [50.8, 599.0], [50.9, 601.0], [51.0, 602.0], [51.1, 604.0], [51.2, 606.0], [51.3, 607.0], [51.4, 609.0], [51.5, 610.0], [51.6, 612.0], [51.7, 613.0], [51.8, 615.0], [51.9, 616.0], [52.0, 618.0], [52.1, 619.0], [52.2, 620.0], [52.3, 622.0], [52.4, 624.0], [52.5, 625.0], [52.6, 627.0], [52.7, 629.0], [52.8, 631.0], [52.9, 633.0], [53.0, 634.0], [53.1, 636.0], [53.2, 637.0], [53.3, 638.0], [53.4, 640.0], [53.5, 642.0], [53.6, 644.0], [53.7, 645.0], [53.8, 647.0], [53.9, 649.0], [54.0, 651.0], [54.1, 653.0], [54.2, 655.0], [54.3, 657.0], [54.4, 659.0], [54.5, 661.0], [54.6, 662.0], [54.7, 664.0], [54.8, 666.0], [54.9, 668.0], [55.0, 670.0], [55.1, 671.0], [55.2, 673.0], [55.3, 675.0], [55.4, 676.0], [55.5, 678.0], [55.6, 680.0], [55.7, 682.0], [55.8, 684.0], [55.9, 685.0], [56.0, 688.0], [56.1, 689.0], [56.2, 691.0], [56.3, 693.0], [56.4, 695.0], [56.5, 696.0], [56.6, 698.0], [56.7, 699.0], [56.8, 701.0], [56.9, 703.0], [57.0, 704.0], [57.1, 706.0], [57.2, 708.0], [57.3, 710.0], [57.4, 712.0], [57.5, 714.0], [57.6, 716.0], [57.7, 718.0], [57.8, 720.0], [57.9, 722.0], [58.0, 724.0], [58.1, 726.0], [58.2, 728.0], [58.3, 729.0], [58.4, 731.0], [58.5, 732.0], [58.6, 734.0], [58.7, 735.0], [58.8, 737.0], [58.9, 738.0], [59.0, 740.0], [59.1, 742.0], [59.2, 744.0], [59.3, 745.0], [59.4, 747.0], [59.5, 749.0], [59.6, 751.0], [59.7, 753.0], [59.8, 756.0], [59.9, 758.0], [60.0, 759.0], [60.1, 762.0], [60.2, 764.0], [60.3, 765.0], [60.4, 767.0], [60.5, 769.0], [60.6, 771.0], [60.7, 772.0], [60.8, 774.0], [60.9, 775.0], [61.0, 777.0], [61.1, 779.0], [61.2, 780.0], [61.3, 782.0], [61.4, 784.0], [61.5, 786.0], [61.6, 788.0], [61.7, 790.0], [61.8, 792.0], [61.9, 795.0], [62.0, 798.0], [62.1, 800.0], [62.2, 801.0], [62.3, 803.0], [62.4, 805.0], [62.5, 807.0], [62.6, 809.0], [62.7, 811.0], [62.8, 813.0], [62.9, 815.0], [63.0, 816.0], [63.1, 818.0], [63.2, 820.0], [63.3, 822.0], [63.4, 824.0], [63.5, 827.0], [63.6, 828.0], [63.7, 831.0], [63.8, 833.0], [63.9, 835.0], [64.0, 838.0], [64.1, 840.0], [64.2, 841.0], [64.3, 843.0], [64.4, 845.0], [64.5, 848.0], [64.6, 850.0], [64.7, 852.0], [64.8, 854.0], [64.9, 856.0], [65.0, 858.0], [65.1, 860.0], [65.2, 862.0], [65.3, 864.0], [65.4, 866.0], [65.5, 868.0], [65.6, 870.0], [65.7, 873.0], [65.8, 874.0], [65.9, 876.0], [66.0, 878.0], [66.1, 880.0], [66.2, 881.0], [66.3, 883.0], [66.4, 885.0], [66.5, 887.0], [66.6, 889.0], [66.7, 891.0], [66.8, 892.0], [66.9, 894.0], [67.0, 896.0], [67.1, 898.0], [67.2, 900.0], [67.3, 902.0], [67.4, 904.0], [67.5, 906.0], [67.6, 908.0], [67.7, 910.0], [67.8, 912.0], [67.9, 914.0], [68.0, 917.0], [68.1, 920.0], [68.2, 923.0], [68.3, 926.0], [68.4, 928.0], [68.5, 930.0], [68.6, 931.0], [68.7, 934.0], [68.8, 937.0], [68.9, 940.0], [69.0, 941.0], [69.1, 944.0], [69.2, 946.0], [69.3, 948.0], [69.4, 951.0], [69.5, 953.0], [69.6, 956.0], [69.7, 957.0], [69.8, 959.0], [69.9, 961.0], [70.0, 963.0], [70.1, 964.0], [70.2, 966.0], [70.3, 969.0], [70.4, 971.0], [70.5, 972.0], [70.6, 974.0], [70.7, 976.0], [70.8, 979.0], [70.9, 981.0], [71.0, 983.0], [71.1, 985.0], [71.2, 988.0], [71.3, 991.0], [71.4, 992.0], [71.5, 994.0], [71.6, 996.0], [71.7, 998.0], [71.8, 1001.0], [71.9, 1003.0], [72.0, 1006.0], [72.1, 1008.0], [72.2, 1010.0], [72.3, 1012.0], [72.4, 1014.0], [72.5, 1016.0], [72.6, 1018.0], [72.7, 1021.0], [72.8, 1024.0], [72.9, 1026.0], [73.0, 1029.0], [73.1, 1032.0], [73.2, 1034.0], [73.3, 1036.0], [73.4, 1038.0], [73.5, 1041.0], [73.6, 1043.0], [73.7, 1045.0], [73.8, 1047.0], [73.9, 1049.0], [74.0, 1052.0], [74.1, 1053.0], [74.2, 1056.0], [74.3, 1058.0], [74.4, 1060.0], [74.5, 1063.0], [74.6, 1065.0], [74.7, 1067.0], [74.8, 1069.0], [74.9, 1071.0], [75.0, 1073.0], [75.1, 1076.0], [75.2, 1078.0], [75.3, 1080.0], [75.4, 1083.0], [75.5, 1085.0], [75.6, 1088.0], [75.7, 1091.0], [75.8, 1093.0], [75.9, 1096.0], [76.0, 1099.0], [76.1, 1100.0], [76.2, 1103.0], [76.3, 1105.0], [76.4, 1107.0], [76.5, 1110.0], [76.6, 1113.0], [76.7, 1116.0], [76.8, 1118.0], [76.9, 1120.0], [77.0, 1123.0], [77.1, 1125.0], [77.2, 1127.0], [77.3, 1130.0], [77.4, 1132.0], [77.5, 1134.0], [77.6, 1137.0], [77.7, 1140.0], [77.8, 1142.0], [77.9, 1145.0], [78.0, 1148.0], [78.1, 1151.0], [78.2, 1154.0], [78.3, 1156.0], [78.4, 1159.0], [78.5, 1162.0], [78.6, 1164.0], [78.7, 1167.0], [78.8, 1169.0], [78.9, 1171.0], [79.0, 1174.0], [79.1, 1178.0], [79.2, 1181.0], [79.3, 1185.0], [79.4, 1188.0], [79.5, 1191.0], [79.6, 1194.0], [79.7, 1197.0], [79.8, 1200.0], [79.9, 1203.0], [80.0, 1206.0], [80.1, 1208.0], [80.2, 1212.0], [80.3, 1215.0], [80.4, 1219.0], [80.5, 1223.0], [80.6, 1225.0], [80.7, 1228.0], [80.8, 1231.0], [80.9, 1235.0], [81.0, 1238.0], [81.1, 1242.0], [81.2, 1245.0], [81.3, 1247.0], [81.4, 1251.0], [81.5, 1256.0], [81.6, 1259.0], [81.7, 1262.0], [81.8, 1266.0], [81.9, 1270.0], [82.0, 1273.0], [82.1, 1276.0], [82.2, 1280.0], [82.3, 1284.0], [82.4, 1287.0], [82.5, 1291.0], [82.6, 1295.0], [82.7, 1297.0], [82.8, 1301.0], [82.9, 1304.0], [83.0, 1307.0], [83.1, 1309.0], [83.2, 1311.0], [83.3, 1315.0], [83.4, 1318.0], [83.5, 1321.0], [83.6, 1325.0], [83.7, 1328.0], [83.8, 1332.0], [83.9, 1337.0], [84.0, 1341.0], [84.1, 1345.0], [84.2, 1351.0], [84.3, 1355.0], [84.4, 1358.0], [84.5, 1361.0], [84.6, 1364.0], [84.7, 1368.0], [84.8, 1372.0], [84.9, 1376.0], [85.0, 1379.0], [85.1, 1382.0], [85.2, 1387.0], [85.3, 1391.0], [85.4, 1394.0], [85.5, 1397.0], [85.6, 1401.0], [85.7, 1405.0], [85.8, 1408.0], [85.9, 1411.0], [86.0, 1415.0], [86.1, 1420.0], [86.2, 1425.0], [86.3, 1430.0], [86.4, 1434.0], [86.5, 1438.0], [86.6, 1442.0], [86.7, 1445.0], [86.8, 1449.0], [86.9, 1452.0], [87.0, 1455.0], [87.1, 1458.0], [87.2, 1461.0], [87.3, 1464.0], [87.4, 1466.0], [87.5, 1470.0], [87.6, 1472.0], [87.7, 1477.0], [87.8, 1481.0], [87.9, 1486.0], [88.0, 1491.0], [88.1, 1496.0], [88.2, 1501.0], [88.3, 1506.0], [88.4, 1510.0], [88.5, 1513.0], [88.6, 1517.0], [88.7, 1521.0], [88.8, 1525.0], [88.9, 1529.0], [89.0, 1534.0], [89.1, 1540.0], [89.2, 1544.0], [89.3, 1549.0], [89.4, 1553.0], [89.5, 1559.0], [89.6, 1564.0], [89.7, 1568.0], [89.8, 1572.0], [89.9, 1578.0], [90.0, 1582.0], [90.1, 1588.0], [90.2, 1593.0], [90.3, 1596.0], [90.4, 1601.0], [90.5, 1604.0], [90.6, 1607.0], [90.7, 1610.0], [90.8, 1614.0], [90.9, 1620.0], [91.0, 1626.0], [91.1, 1631.0], [91.2, 1636.0], [91.3, 1645.0], [91.4, 1651.0], [91.5, 1658.0], [91.6, 1666.0], [91.7, 1672.0], [91.8, 1679.0], [91.9, 1686.0], [92.0, 1694.0], [92.1, 1701.0], [92.2, 1711.0], [92.3, 1721.0], [92.4, 1727.0], [92.5, 1732.0], [92.6, 1737.0], [92.7, 1743.0], [92.8, 1749.0], [92.9, 1755.0], [93.0, 1760.0], [93.1, 1768.0], [93.2, 1775.0], [93.3, 1787.0], [93.4, 1793.0], [93.5, 1800.0], [93.6, 1812.0], [93.7, 1823.0], [93.8, 1832.0], [93.9, 1841.0], [94.0, 1848.0], [94.1, 1855.0], [94.2, 1867.0], [94.3, 1882.0], [94.4, 1893.0], [94.5, 1901.0], [94.6, 1910.0], [94.7, 1919.0], [94.8, 1927.0], [94.9, 1937.0], [95.0, 1952.0], [95.1, 1969.0], [95.2, 1985.0], [95.3, 2003.0], [95.4, 2016.0], [95.5, 2032.0], [95.6, 2054.0], [95.7, 2067.0], [95.8, 2089.0], [95.9, 2110.0], [96.0, 2129.0], [96.1, 2159.0], [96.2, 2184.0], [96.3, 2209.0], [96.4, 2220.0], [96.5, 2241.0], [96.6, 2265.0], [96.7, 2295.0], [96.8, 2343.0], [96.9, 2391.0], [97.0, 2455.0], [97.1, 2532.0], [97.2, 2629.0], [97.3, 2727.0], [97.4, 2982.0], [97.5, 3278.0], [97.6, 3402.0], [97.7, 3487.0], [97.8, 3577.0], [97.9, 3696.0], [98.0, 3813.0], [98.1, 3988.0], [98.2, 4473.0], [98.3, 4592.0], [98.4, 4671.0], [98.5, 4766.0], [98.6, 4876.0], [98.7, 5001.0], [98.8, 6475.0], [98.9, 6680.0], [99.0, 6817.0], [99.1, 6966.0], [99.2, 7067.0], [99.3, 7191.0], [99.4, 7274.0], [99.5, 7503.0], [99.6, 7792.0], [99.7, 8094.0], [99.8, 8458.0], [99.9, 8996.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 5558.0, "series": [{"data": [[0.0, 3828.0], [600.0, 3032.0], [700.0, 2777.0], [800.0, 2626.0], [900.0, 2346.0], [1000.0, 2221.0], [1100.0, 1931.0], [1200.0, 1538.0], [1300.0, 1436.0], [1400.0, 1340.0], [1500.0, 1139.0], [1600.0, 884.0], [1700.0, 716.0], [1800.0, 520.0], [1900.0, 395.0], [2000.0, 311.0], [2100.0, 208.0], [2200.0, 231.0], [2300.0, 105.0], [2400.0, 74.0], [2500.0, 56.0], [2600.0, 56.0], [2700.0, 39.0], [2800.0, 19.0], [2900.0, 8.0], [3000.0, 13.0], [3100.0, 15.0], [3200.0, 29.0], [3300.0, 44.0], [3400.0, 58.0], [3500.0, 53.0], [3600.0, 44.0], [3700.0, 48.0], [3800.0, 35.0], [3900.0, 21.0], [4000.0, 7.0], [4200.0, 5.0], [4100.0, 9.0], [4300.0, 11.0], [4600.0, 70.0], [4500.0, 40.0], [4400.0, 30.0], [4800.0, 51.0], [4700.0, 48.0], [5000.0, 30.0], [5100.0, 10.0], [4900.0, 35.0], [5200.0, 6.0], [5300.0, 2.0], [5500.0, 1.0], [5400.0, 2.0], [6100.0, 1.0], [6300.0, 1.0], [6600.0, 33.0], [6500.0, 23.0], [6400.0, 1.0], [6800.0, 34.0], [6900.0, 43.0], [6700.0, 38.0], [7000.0, 44.0], [7100.0, 47.0], [7200.0, 55.0], [7300.0, 26.0], [7400.0, 17.0], [7600.0, 15.0], [7500.0, 17.0], [7800.0, 15.0], [7900.0, 16.0], [7700.0, 20.0], [8100.0, 18.0], [8000.0, 21.0], [8600.0, 13.0], [8400.0, 8.0], [8500.0, 8.0], [8200.0, 14.0], [8700.0, 7.0], [8300.0, 14.0], [8900.0, 13.0], [9100.0, 10.0], [9200.0, 12.0], [8800.0, 9.0], [9000.0, 6.0], [9300.0, 5.0], [9700.0, 1.0], [9500.0, 3.0], [9400.0, 6.0], [9600.0, 6.0], [9800.0, 1.0], [100.0, 4612.0], [200.0, 5558.0], [300.0, 4812.0], [400.0, 3997.0], [500.0, 3387.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6082.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 22850.0, "series": [{"data": [[0.0, 22850.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 22608.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 6082.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.301614273576889, "minX": 1.67576664E12, "maxY": 288.7892857142853, "series": [{"data": [[1.6757667E12, 100.0], [1.67576664E12, 92.06196883852697], [1.67576676E12, 81.42196531791907]], "isOverall": false, "label": "Basic load", "isController": false}, {"data": [[1.67576724E12, 288.7892857142853]], "isOverall": false, "label": "Exponential Growth", "isController": false}, {"data": [[1.67576724E12, 73.91758018676427]], "isOverall": false, "label": "Spike test", "isController": false}, {"data": [[1.67576724E12, 16.034175334323923], [1.67576718E12, 16.16236811254399]], "isOverall": false, "label": "Random load", "isController": false}, {"data": [[1.67576682E12, 76.48150266971763], [1.67576694E12, 22.116825208085576], [1.67576676E12, 22.742894393741878], [1.67576688E12, 73.86786114221711]], "isOverall": false, "label": "Ramp Up and Down", "isController": false}, {"data": [[1.67576706E12, 60.23115098301187], [1.675767E12, 24.846043165467627], [1.67576712E12, 99.95040346388505], [1.67576694E12, 7.301614273576889], [1.67576718E12, 65.11688311688303]], "isOverall": false, "label": "Multi-step Ramp", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67576724E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 24.864864864864877, "minX": 1.0, "maxY": 9783.0, "series": [{"data": [[2.0, 26.52727272727275], [3.0, 86.08633093525178], [4.0, 72.99038461538461], [5.0, 57.53846153846153], [6.0, 70.91071428571432], [7.0, 154.546925566343], [8.0, 101.17840375586856], [9.0, 146.9694915254237], [10.0, 122.50700280112048], [11.0, 174.3217158176944], [12.0, 134.10401891252948], [13.0, 153.6267190569743], [14.0, 166.87229862475445], [15.0, 206.3911205073996], [16.0, 252.094501718213], [17.0, 246.27149321266975], [18.0, 224.20727272727274], [19.0, 285.3620915032678], [20.0, 272.3823529411764], [21.0, 299.25468749999976], [22.0, 289.9065420560751], [23.0, 322.1948356807513], [24.0, 338.75900277008316], [25.0, 328.05161448140893], [26.0, 337.7639639639641], [27.0, 405.70818505338076], [28.0, 431.7700534759359], [29.0, 364.05762711864406], [30.0, 394.8169014084505], [31.0, 428.8393574297189], [33.0, 456.18], [32.0, 378.32713754646846], [34.0, 476.4060606060607], [35.0, 516.9087301587299], [37.0, 537.9181818181822], [36.0, 490.6266666666666], [39.0, 528.7370517928289], [38.0, 507.2912621359224], [41.0, 497.91497975708495], [40.0, 582.2304347826084], [42.0, 544.3755656108599], [43.0, 571.9845559845561], [44.0, 712.0609756097562], [45.0, 510.4080267558529], [47.0, 563.9104938271608], [46.0, 548.6261261261261], [49.0, 631.0284360189567], [48.0, 597.854489164087], [50.0, 573.4561095505609], [51.0, 541.3793103448274], [52.0, 584.1594202898551], [53.0, 711.7372013651873], [54.0, 748.0546874999997], [55.0, 752.9838709677417], [57.0, 709.4897119341563], [56.0, 752.3468208092484], [59.0, 780.649350649351], [58.0, 724.6503759398489], [61.0, 725.8939393939393], [60.0, 838.910994764398], [63.0, 717.8260869565215], [62.0, 709.3722627737227], [64.0, 776.4836363636367], [67.0, 863.9843749999999], [66.0, 784.0099667774085], [65.0, 781.9047619047615], [71.0, 996.7318435754194], [70.0, 923.9299363057327], [69.0, 880.2165354330708], [68.0, 803.875471698113], [73.0, 924.9675516224181], [75.0, 901.1091445427729], [74.0, 952.8666666666666], [72.0, 1027.0320855614978], [79.0, 858.4944237918213], [78.0, 888.2565055762082], [77.0, 793.4940711462447], [76.0, 997.5972850678727], [82.0, 1019.7554744525544], [83.0, 903.6235741444867], [81.0, 953.6050156739813], [80.0, 860.8063063063066], [87.0, 1240.8499999999995], [85.0, 1027.4803921568619], [84.0, 862.25], [86.0, 1118.936758893281], [89.0, 993.8199233716476], [88.0, 1171.1347826086958], [90.0, 864.9662921348315], [91.0, 1157.4325581395344], [92.0, 1116.2114695340504], [95.0, 1098.8823529411764], [94.0, 1078.1310541310536], [93.0, 1135.5062499999997], [96.0, 1207.0588235294108], [99.0, 1027.5863636363638], [98.0, 1157.1762917933127], [97.0, 1221.4915966386543], [100.0, 1210.808879492598], [101.0, 1940.4428571428573], [103.0, 4037.75], [102.0, 4708.0], [105.0, 4186.0], [104.0, 3552.0], [115.0, 3446.6666666666665], [114.0, 3521.4], [118.0, 3774.25], [116.0, 3532.0], [121.0, 2346.3333333333335], [123.0, 4040.0], [122.0, 3554.0], [120.0, 4048.0], [124.0, 4560.0], [130.0, 4460.0], [143.0, 4736.636363636363], [141.0, 4649.5], [139.0, 4765.0], [145.0, 1355.0], [146.0, 1836.0], [148.0, 4020.5], [151.0, 4646.0], [149.0, 4761.0], [147.0, 4674.0], [144.0, 4890.333333333333], [159.0, 3811.0], [158.0, 3715.75], [157.0, 4387.333333333333], [156.0, 4011.25], [155.0, 3627.1666666666665], [154.0, 4149.75], [152.0, 4264.0], [166.0, 3958.0], [165.0, 3581.5], [164.0, 3294.0], [163.0, 3686.6666666666665], [162.0, 3495.6666666666665], [161.0, 3977.5], [160.0, 4945.0], [175.0, 4114.0], [172.0, 3372.5], [171.0, 4409.0], [170.0, 3338.0], [169.0, 3521.0], [174.0, 4421.0], [173.0, 4562.0], [180.0, 3540.8333333333335], [179.0, 3562.0], [177.0, 3362.5], [176.0, 3245.0], [191.0, 3418.0], [190.0, 3452.0], [189.0, 3282.0], [188.0, 3881.0], [187.0, 3581.6666666666665], [185.0, 3646.5], [184.0, 3443.3333333333335], [198.0, 2013.0], [199.0, 1941.0], [194.0, 3545.777777777778], [192.0, 3583.0], [200.0, 1668.0], [206.0, 3718.25], [205.0, 4065.0], [204.0, 3866.6], [202.0, 3363.0], [201.0, 3452.5], [207.0, 4359.0], [215.0, 4795.0], [214.0, 4680.0], [213.0, 4703.0], [211.0, 4702.5], [210.0, 4638.0], [209.0, 4655.5], [208.0, 4639.0], [223.0, 4849.0], [222.0, 4810.5], [221.0, 4920.0], [220.0, 4814.666666666667], [217.0, 4885.0], [216.0, 4767.0], [231.0, 4987.5], [230.0, 4912.0], [229.0, 5013.0], [228.0, 5040.5], [226.0, 5013.666666666667], [224.0, 4923.75], [238.0, 3774.0], [237.0, 3245.0], [236.0, 4799.333333333333], [234.0, 4728.666666666667], [241.0, 3966.5], [242.0, 4164.090909090909], [247.0, 4038.3333333333335], [246.0, 3881.75], [245.0, 3319.0], [244.0, 3944.0], [240.0, 3776.0], [255.0, 6573.5], [251.0, 5069.0], [250.0, 4207.428571428572], [254.0, 3626.75], [253.0, 3440.25], [252.0, 4343.666666666667], [249.0, 3984.0], [248.0, 4772.0], [259.0, 6695.0], [271.0, 4644.166666666666], [268.0, 5077.0], [269.0, 3614.0], [266.0, 6475.0], [267.0, 4396.75], [264.0, 5215.0], [265.0, 3638.0], [262.0, 5558.166666666666], [261.0, 5118.75], [260.0, 4520.666666666667], [258.0, 5788.5], [257.0, 4568.4], [263.0, 4517.666666666667], [256.0, 4606.4], [273.0, 5607.0], [281.0, 4452.625], [283.0, 4554.571428571428], [280.0, 5328.8], [279.0, 4952.777777777778], [278.0, 4665.933333333333], [277.0, 6804.5], [276.0, 3934.0], [274.0, 5232.2], [275.0, 4129.333333333333], [285.0, 3843.5], [284.0, 3883.5], [272.0, 5571.0], [287.0, 3883.0], [286.0, 3650.0], [302.0, 4225.0], [303.0, 4430.25], [301.0, 4117.666666666667], [300.0, 4548.0], [290.0, 3715.0], [289.0, 4093.0], [288.0, 3714.5], [299.0, 3988.75], [298.0, 4167.5], [296.0, 4021.6666666666665], [297.0, 4610.5], [294.0, 4378.333333333333], [293.0, 4034.5], [292.0, 4016.428571428571], [316.0, 4033.75], [319.0, 6627.888888888889], [318.0, 4241.5], [317.0, 4640.25], [312.0, 3776.0], [315.0, 4689.0], [314.0, 4592.0], [313.0, 4990.0], [311.0, 4123.0], [305.0, 3825.0], [304.0, 3818.0], [310.0, 4691.333333333333], [309.0, 4367.0], [308.0, 4639.0], [307.0, 4411.666666666667], [306.0, 4574.666666666667], [334.0, 6611.142857142857], [335.0, 6785.363636363636], [333.0, 6870.2], [332.0, 7009.25], [331.0, 6828.4], [330.0, 6876.0], [329.0, 7253.2], [328.0, 6876.428571428572], [327.0, 6923.5], [321.0, 6526.8], [320.0, 6643.722222222223], [323.0, 6326.0], [322.0, 5302.428571428571], [326.0, 6974.0], [325.0, 5852.0], [324.0, 5902.333333333333], [351.0, 3918.666666666667], [348.0, 3846.7999999999997], [339.0, 6893.857142857142], [338.0, 5927.0], [337.0, 6121.75], [336.0, 6772.777777777777], [349.0, 5631.666666666667], [350.0, 6941.0], [347.0, 5657.249999999999], [346.0, 6535.0], [345.0, 6443.749999999999], [344.0, 6279.714285714286], [343.0, 6439.777777777777], [342.0, 7301.0], [341.0, 5697.4], [340.0, 6312.095238095239], [355.0, 7230.5], [366.0, 7419.5], [367.0, 7319.333333333333], [365.0, 7214.0], [354.0, 7762.0], [353.0, 7337.0], [352.0, 6768.5], [361.0, 7221.0], [360.0, 7091.0], [359.0, 7259.5], [358.0, 8213.5], [357.0, 7407.666666666667], [356.0, 7119.0], [382.0, 7190.0], [383.0, 7249.666666666667], [381.0, 7323.0], [380.0, 7022.0], [379.0, 6968.0], [378.0, 7103.5], [377.0, 7156.0], [375.0, 7225.333333333333], [371.0, 7740.25], [370.0, 7246.5], [369.0, 7231.0], [368.0, 7253.0], [374.0, 7338.5], [399.0, 7364.0], [397.0, 7365.333333333333], [395.0, 7413.5], [394.0, 7552.0], [392.0, 7363.0], [390.0, 7261.333333333333], [389.0, 7223.0], [387.0, 7130.0], [386.0, 7262.0], [414.0, 7273.0], [413.0, 8022.0], [411.0, 8187.5], [410.0, 7999.0], [409.0, 8289.0], [408.0, 7767.4], [406.0, 7725.0], [405.0, 7877.0], [403.0, 7687.5], [401.0, 7524.333333333333], [429.0, 8123.0], [431.0, 7454.0], [428.0, 8185.0], [419.0, 7878.0], [417.0, 8000.0], [416.0, 8260.0], [427.0, 7834.0], [426.0, 7816.0], [424.0, 7844.0], [423.0, 7840.0], [422.0, 7941.0], [420.0, 8500.0], [446.0, 8137.0], [447.0, 8040.5], [445.0, 7954.5], [433.0, 8093.5], [432.0, 7650.0], [443.0, 8576.0], [442.0, 7924.0], [440.0, 8061.25], [439.0, 7867.333333333333], [438.0, 7962.0], [437.0, 9217.0], [436.0, 7785.333333333333], [463.0, 8129.0], [461.0, 8149.0], [450.0, 9667.0], [449.0, 8708.0], [459.0, 7943.0], [457.0, 8039.0], [456.0, 8217.0], [455.0, 7665.0], [454.0, 8409.0], [453.0, 8381.0], [452.0, 8361.5], [466.0, 7831.5], [464.0, 8291.0], [499.0, 7989.666666666667], [509.0, 7895.0], [510.0, 7773.0], [508.0, 8626.0], [498.0, 7969.8], [497.0, 8060.714285714285], [507.0, 8147.0], [504.0, 8146.285714285714], [503.0, 8011.5], [502.0, 8057.75], [501.0, 8176.0], [500.0, 7744.0], [537.0, 9235.0], [542.0, 8491.0], [520.0, 5970.0], [521.0, 9297.0], [525.0, 8714.0], [523.0, 8421.5], [527.0, 8622.0], [512.0, 8067.5], [515.0, 7960.0], [514.0, 7658.5], [519.0, 8563.0], [517.0, 7747.5], [526.0, 8688.0], [543.0, 9311.0], [530.0, 8387.0], [528.0, 8973.0], [532.0, 8601.0], [531.0, 9081.0], [541.0, 8821.0], [540.0, 8862.0], [539.0, 8614.0], [535.0, 8631.5], [533.0, 8838.0], [571.0, 8540.0], [563.0, 9022.0], [575.0, 8971.0], [560.0, 9147.0], [570.0, 8540.0], [569.0, 8259.0], [559.0, 8962.5], [546.0, 9428.0], [545.0, 8929.5], [549.0, 9026.0], [548.0, 9249.0], [551.0, 8348.0], [550.0, 8421.5], [558.0, 8246.0], [556.0, 8771.0], [555.0, 8986.0], [554.0, 8186.0], [553.0, 9161.0], [552.0, 8650.0], [567.0, 9132.0], [566.0, 9658.0], [565.0, 9196.5], [562.0, 9570.0], [561.0, 8737.0], [605.0, 9262.0], [607.0, 8911.0], [592.0, 9699.0], [594.0, 9252.0], [593.0, 9490.0], [603.0, 9329.0], [602.0, 9244.0], [601.0, 9151.0], [600.0, 9783.0], [591.0, 9043.0], [580.0, 8732.0], [577.0, 9089.5], [583.0, 9362.5], [582.0, 9281.0], [590.0, 9610.0], [589.0, 9348.0], [587.0, 8839.0], [585.0, 9100.0], [584.0, 8848.0], [599.0, 9106.0], [598.0, 9544.666666666666], [597.0, 8998.0], [596.0, 8917.5], [625.0, 4957.0], [630.0, 3400.0], [627.0, 4674.0], [626.0, 4220.0], [623.0, 5506.0], [608.0, 9232.0], [611.0, 8867.0], [610.0, 8825.0], [613.0, 9125.0], [612.0, 9241.5], [615.0, 7127.0], [614.0, 8996.0], [622.0, 4891.0], [621.0, 5122.0], [620.0, 7161.5], [618.0, 6898.0], [617.0, 6963.5], [1.0, 24.864864864864877]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[64.32048894062831, 830.8347497089609]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 630.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5459.733333333334, "minX": 1.67576664E12, "maxY": 72422.3, "series": [{"data": [[1.6757667E12, 63568.88333333333], [1.67576706E12, 70813.81666666667], [1.675767E12, 65758.58333333333], [1.67576724E12, 53742.26666666667], [1.67576682E12, 70881.4], [1.67576664E12, 38171.066666666666], [1.67576712E12, 68678.18333333333], [1.67576694E12, 61379.183333333334], [1.67576676E12, 70543.48333333334], [1.67576718E12, 60689.833333333336], [1.67576688E12, 72422.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6757667E12, 9092.466666666667], [1.67576706E12, 10128.733333333334], [1.675767E12, 9405.666666666666], [1.67576724E12, 7686.933333333333], [1.67576682E12, 10138.4], [1.67576664E12, 5459.733333333334], [1.67576712E12, 9823.266666666666], [1.67576694E12, 8779.266666666666], [1.67576676E12, 10090.066666666668], [1.67576718E12, 8680.666666666666], [1.67576688E12, 10358.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67576724E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 236.38515745430573, "minX": 1.67576664E12, "maxY": 2139.5279175050323, "series": [{"data": [[1.6757667E12, 1279.4665107378294], [1.67576706E12, 682.6104218362267], [1.675767E12, 302.3040082219937], [1.67576724E12, 2139.5279175050323], [1.67576682E12, 864.0802822273067], [1.67576664E12, 1198.632790368268], [1.67576712E12, 1178.4341665026543], [1.67576694E12, 236.38515745430573], [1.67576676E12, 420.4866832726563], [1.67576718E12, 361.0530066815166], [1.67576688E12, 831.9057484135868]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67576724E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 236.38009249064143, "minX": 1.67576664E12, "maxY": 2139.521881287725, "series": [{"data": [[1.6757667E12, 1279.460557091216], [1.67576706E12, 682.6046955525863], [1.675767E12, 302.2959917780064], [1.67576724E12, 2139.521881287725], [1.67576682E12, 864.0781845919136], [1.67576664E12, 1198.605169971671], [1.67576712E12, 1178.43141113954], [1.67576694E12, 236.38009249064143], [1.67576676E12, 420.4818930829671], [1.67576718E12, 361.04832962137914], [1.67576688E12, 831.9008958566639]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67576724E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 234.8339572781334, "minX": 1.67576664E12, "maxY": 2013.102867203214, "series": [{"data": [[1.6757667E12, 1104.180948330855], [1.67576706E12, 677.8789845390332], [1.675767E12, 300.70565262075996], [1.67576724E12, 2013.102867203214], [1.67576682E12, 851.9197177726938], [1.67576664E12, 1005.9564447592053], [1.67576712E12, 1164.796299940956], [1.67576694E12, 234.8339572781334], [1.67576676E12, 381.3370377466958], [1.67576718E12, 359.63541202672656], [1.67576688E12, 828.2896603210132]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67576724E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.67576664E12, "maxY": 9840.0, "series": [{"data": [[1.6757667E12, 3153.0], [1.67576706E12, 3013.0], [1.675767E12, 1271.0], [1.67576724E12, 9840.0], [1.67576682E12, 3404.0], [1.67576664E12, 2783.0], [1.67576712E12, 3931.0], [1.67576694E12, 1416.0], [1.67576676E12, 1986.0], [1.67576718E12, 3356.0], [1.67576688E12, 3568.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6757667E12, 295.0], [1.67576706E12, 96.0], [1.675767E12, 50.0], [1.67576724E12, 10.0], [1.67576682E12, 81.0], [1.67576664E12, 22.0], [1.67576712E12, 113.0], [1.67576694E12, 12.0], [1.67576676E12, 10.0], [1.67576718E12, 13.0], [1.67576688E12, 30.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6757667E12, 1850.0], [1.67576706E12, 1174.0], [1.675767E12, 488.0], [1.67576724E12, 7108.900000000001], [1.67576682E12, 1450.5], [1.67576664E12, 1760.0], [1.67576712E12, 1917.0], [1.67576694E12, 530.0], [1.67576676E12, 971.0], [1.67576718E12, 874.8000000000002], [1.67576688E12, 1432.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6757667E12, 2225.96], [1.67576706E12, 1860.4000000000015], [1.675767E12, 755.3400000000001], [1.67576724E12, 9135.45], [1.67576682E12, 2272.4500000000035], [1.67576664E12, 2308.5], [1.67576712E12, 2728.1800000000003], [1.67576694E12, 909.1599999999999], [1.67576676E12, 1489.800000000002], [1.67576718E12, 2138.4500000000007], [1.67576688E12, 2225.459999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6757667E12, 1244.0], [1.67576706E12, 602.0], [1.675767E12, 275.0], [1.67576724E12, 439.0], [1.67576682E12, 779.0], [1.67576664E12, 1212.0], [1.67576712E12, 1098.0], [1.67576694E12, 177.0], [1.67576676E12, 323.0], [1.67576718E12, 228.0], [1.67576688E12, 741.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.6757667E12, 2009.8000000000002], [1.67576706E12, 1407.0], [1.675767E12, 561.6999999999998], [1.67576724E12, 7848.049999999997], [1.67576682E12, 1710.25], [1.67576664E12, 1977.75], [1.67576712E12, 2217.8999999999996], [1.67576694E12, 659.6999999999989], [1.67576676E12, 1166.0], [1.67576718E12, 1319.7999999999993], [1.67576688E12, 1674.0500000000002]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67576724E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27.0, "minX": 1.0, "maxY": 8996.0, "series": [{"data": [[3.0, 3387.0], [5.0, 1236.0], [6.0, 3465.0], [7.0, 2062.0], [8.0, 1232.0], [9.0, 8996.0], [11.0, 2620.0], [13.0, 31.0], [17.0, 251.0], [18.0, 1194.5], [20.0, 316.0], [29.0, 401.0], [30.0, 29.5], [31.0, 1456.0], [32.0, 1054.5], [34.0, 2091.0], [37.0, 27.0], [41.0, 1462.5], [45.0, 1329.0], [46.0, 1033.0], [48.0, 596.5], [50.0, 1151.0], [52.0, 1272.5], [53.0, 1111.0], [54.0, 922.5], [55.0, 1310.0], [57.0, 1029.0], [56.0, 328.5], [59.0, 553.0], [58.0, 352.5], [61.0, 984.0], [60.0, 755.0], [63.0, 478.0], [62.0, 262.0], [65.0, 570.5], [64.0, 334.5], [66.0, 438.0], [67.0, 398.0], [70.0, 398.0], [68.0, 374.5], [69.0, 517.0], [71.0, 394.0], [73.0, 485.0], [75.0, 433.0], [74.0, 552.5], [72.0, 350.5], [79.0, 543.0], [77.0, 638.0], [78.0, 830.5], [76.0, 441.5], [81.0, 1038.0], [82.0, 656.0], [83.0, 425.0], [80.0, 354.0], [86.0, 725.0], [84.0, 852.0], [85.0, 305.5], [87.0, 682.0], [91.0, 648.0], [88.0, 795.0], [89.0, 536.0], [90.0, 278.0], [93.0, 878.0], [92.0, 607.5], [95.0, 671.0], [94.0, 740.0], [99.0, 1052.0], [96.0, 499.5], [97.0, 543.0], [98.0, 435.0], [101.0, 549.0], [103.0, 525.0], [102.0, 448.5], [100.0, 240.5], [106.0, 781.0], [104.0, 653.5], [107.0, 553.0], [105.0, 385.0], [109.0, 731.0], [108.0, 893.5], [110.0, 694.0], [111.0, 294.0], [112.0, 427.5], [115.0, 641.0], [113.0, 790.0], [114.0, 420.5], [118.0, 433.0], [117.0, 375.0], [116.0, 88.5], [119.0, 705.0], [120.0, 918.0], [123.0, 1119.5], [121.0, 353.0], [122.0, 1165.5], [126.0, 930.0], [127.0, 843.0], [125.0, 1196.5], [129.0, 994.5], [132.0, 1249.0], [128.0, 1130.5], [130.0, 366.5], [133.0, 797.0], [136.0, 735.5], [138.0, 847.5], [167.0, 748.0], [227.0, 3619.0], [304.0, 4727.0], [586.0, 7290.0], [1.0, 2507.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 586.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27.0, "minX": 1.0, "maxY": 8996.0, "series": [{"data": [[3.0, 3387.0], [5.0, 1236.0], [6.0, 3465.0], [7.0, 2062.0], [8.0, 1232.0], [9.0, 8996.0], [11.0, 2620.0], [13.0, 31.0], [17.0, 251.0], [18.0, 1194.5], [20.0, 316.0], [29.0, 401.0], [30.0, 29.5], [31.0, 1456.0], [32.0, 1054.5], [34.0, 2090.5], [37.0, 27.0], [41.0, 1462.5], [45.0, 1329.0], [46.0, 1033.0], [48.0, 596.5], [50.0, 1151.0], [52.0, 1272.5], [53.0, 1111.0], [54.0, 922.5], [55.0, 1310.0], [57.0, 1029.0], [56.0, 328.5], [59.0, 553.0], [58.0, 352.5], [61.0, 984.0], [60.0, 755.0], [63.0, 478.0], [62.0, 262.0], [65.0, 570.5], [64.0, 334.5], [66.0, 438.0], [67.0, 398.0], [70.0, 398.0], [68.0, 374.0], [69.0, 517.0], [71.0, 394.0], [73.0, 485.0], [75.0, 433.0], [74.0, 552.5], [72.0, 350.5], [79.0, 543.0], [77.0, 638.0], [78.0, 830.5], [76.0, 441.5], [81.0, 1038.0], [82.0, 656.0], [83.0, 425.0], [80.0, 354.0], [86.0, 725.0], [84.0, 852.0], [85.0, 305.5], [87.0, 682.0], [91.0, 648.0], [88.0, 795.0], [89.0, 536.0], [90.0, 278.0], [93.0, 878.0], [92.0, 607.5], [95.0, 671.0], [94.0, 740.0], [99.0, 1052.0], [96.0, 499.5], [97.0, 543.0], [98.0, 435.0], [101.0, 549.0], [103.0, 525.0], [102.0, 448.5], [100.0, 240.5], [106.0, 781.0], [104.0, 653.5], [107.0, 553.0], [105.0, 385.0], [109.0, 731.0], [108.0, 893.5], [110.0, 694.0], [111.0, 294.0], [112.0, 427.5], [115.0, 641.0], [113.0, 790.0], [114.0, 420.5], [118.0, 433.0], [117.0, 375.0], [116.0, 88.5], [119.0, 705.0], [120.0, 918.0], [123.0, 1119.5], [121.0, 353.0], [122.0, 1165.5], [126.0, 930.0], [127.0, 843.0], [125.0, 1196.5], [129.0, 994.5], [132.0, 1249.0], [128.0, 1130.5], [130.0, 366.5], [133.0, 797.0], [136.0, 735.5], [138.0, 847.5], [167.0, 748.0], [227.0, 3619.0], [304.0, 4727.0], [586.0, 7290.0], [1.0, 2507.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 586.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 48.733333333333334, "minX": 1.67576664E12, "maxY": 88.31666666666666, "series": [{"data": [[1.6757667E12, 78.38333333333334], [1.67576706E12, 88.21666666666667], [1.675767E12, 81.55], [1.67576724E12, 65.96666666666667], [1.67576682E12, 88.28333333333333], [1.67576664E12, 48.733333333333334], [1.67576712E12, 84.75], [1.67576694E12, 75.23333333333333], [1.67576676E12, 86.1], [1.67576718E12, 73.46666666666667], [1.67576688E12, 88.31666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67576724E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 47.06666666666667, "minX": 1.67576664E12, "maxY": 89.3, "series": [{"data": [[1.6757667E12, 78.38333333333334], [1.67576706E12, 87.31666666666666], [1.675767E12, 81.08333333333333], [1.67576724E12, 66.26666666666667], [1.67576682E12, 87.4], [1.67576664E12, 47.06666666666667], [1.67576712E12, 84.68333333333334], [1.67576694E12, 75.68333333333334], [1.67576676E12, 86.98333333333333], [1.67576718E12, 74.83333333333333], [1.67576688E12, 89.3]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67576724E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 47.06666666666667, "minX": 1.67576664E12, "maxY": 89.3, "series": [{"data": [[1.6757667E12, 78.38333333333334], [1.67576706E12, 87.31666666666666], [1.675767E12, 81.08333333333333], [1.67576724E12, 66.26666666666667], [1.67576682E12, 87.4], [1.67576664E12, 47.06666666666667], [1.67576712E12, 84.68333333333334], [1.67576694E12, 75.68333333333334], [1.67576676E12, 86.98333333333333], [1.67576718E12, 74.83333333333333], [1.67576688E12, 89.3]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67576724E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 47.06666666666667, "minX": 1.67576664E12, "maxY": 89.3, "series": [{"data": [[1.6757667E12, 78.38333333333334], [1.67576706E12, 87.31666666666666], [1.675767E12, 81.08333333333333], [1.67576724E12, 66.26666666666667], [1.67576682E12, 87.4], [1.67576664E12, 47.06666666666667], [1.67576712E12, 84.68333333333334], [1.67576694E12, 75.68333333333334], [1.67576676E12, 86.98333333333333], [1.67576718E12, 74.83333333333333], [1.67576688E12, 89.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67576724E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

